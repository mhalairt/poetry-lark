"""
"""

import pytest

from cleo.io.outputs.output import Verbosity
from cleo.testers.application_tester import ApplicationTester
from poetry.console.application import Application

from tests.heplers import configure_build


@pytest.fixture
def tester() -> ApplicationTester:
    """Command's tester."""
    return ApplicationTester(
        Application(),
    )


def test_success_build_hook(tester, mocker):
    """Test success on a adding."""
    config = (
        '[[tool.lark.standalone]]\n'
        'module = "parser"\n'
        'source = "grammar.lark"'
    )

    grammar = (
        '?start: sum\n'
        '  | NAME "=" sum -> assign_var\n\n'
        '?sum: product\n'
        '   | sum "+" product -> add\n'
        '   | sum "-" product -> sub\n\n'
        '?product: atom\n'
        '   | product "*" atom -> mul\n'
        '   | product "/" atom -> div\n\n'
        '?atom: NUMBER -> number\n'
        '   | "-" atom -> neg\n'
        '   | NAME -> var\n'
        '   | "(" sum ")"\n\n'
        '%import common.CNAME -> NAME\n'
        '%import common.NUMBER\n'
        '%import common.WS_INLINE\n'
        '%ignore WS_INLINE'
    )

    with configure_build(mocker, config, grammar) as result:
        tester.execute('lark-build', verbosity=Verbosity.DEBUG)
        assert tester.io.fetch_error() == ''
        assert tester.status_code == 0
        assert result.getvalue().startswith('# The file was automatically generated by Lark')
